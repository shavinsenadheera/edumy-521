<?php

    namespace Modules\Course\Controllers;
    use App\Http\Controllers\Controller;
    use Illuminate\Support\Facades\Auth;
    use Modules\Booking\Models\BookingItem;
    use Modules\Course\Models\Course;
    use Illuminate\Http\Request;
    use Modules\Course\Models\CourseCategory;
    use Modules\Course\Models\CourseTerm;
    use Modules\Course\Models\Sections;
    use Modules\Location\Models\Location;
    use Modules\Review\Models\Review;
    use Modules\Core\Models\Attributes;
    use DB;
    use App\User;

    class CourseController extends Controller
    {
        protected $courseClass;
        protected $locationClass;
        protected $courseCategoryClass;
        protected $attributesClass;
        protected $sectionsClass;
        protected $userClass;

        public function __construct()
        {
            $this->courseClass = Course::class;
            $this->courseCategoryClass = CourseCategory::class;
            $this->attributesClass = Attributes::class;
            $this->sectionsClass = Sections::class;
            $this->userClass = User::class;
        }
        public function callAction($method, $parameters)
        {
            if(setting_item('course_disable'))
            {
                return redirect('/');
            }
            return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
        }

        public function index(Request $request)
        {
            $is_ajax = $request->query('_ajax');
            $time_s = $request->query('time_s');

            $model_Course = $this->courseClass::select("bravo_courses.*");
            $model_Course->where("bravo_courses.status", "publish");

            if (!empty($search = $request->input("s"))) {
                $model_Course->where('bravo_courses.title', 'LIKE', '%' . $search . '%');
            }

            if (!empty($price_range = $request->query('price_range'))) {
                $pri_from = explode(";", $price_range)[0];
                $pri_to = explode(";", $price_range)[1];
                $raw_sql_min_max = "( (IFNULL(bravo_courses.sale_price,0) > 0 and bravo_courses.sale_price >= ? ) OR (IFNULL(bravo_courses.sale_price,0) <= 0 and bravo_courses.price >= ?) ) 
								AND ( (IFNULL(bravo_courses.sale_price,0) > 0 and bravo_courses.sale_price <= ? ) OR (IFNULL(bravo_courses.sale_price,0) <= 0 and bravo_courses.price <= ?) )";
                $model_Course->WhereRaw($raw_sql_min_max,[$pri_from,$pri_from,$pri_to,$pri_to]);
            }

            if (!empty($category_ids = $request->query('cat_id'))) {
                if(!is_array($category_ids)) $category_ids = [$category_ids];
                $list_cat = $this->courseCategoryClass::whereIn('id', $category_ids)->where("status","publish")->get();
                if(!empty($list_cat)){
                    $where_left_right = [];
                    foreach ($list_cat as $cat){
                        $where_left_right[] = " ( bravo_course_category._lft >= {$cat->_lft} AND bravo_course_category._rgt <= {$cat->_rgt} ) ";
                    }
                    $sql_where_join = " ( " . implode("OR", $where_left_right) . " )  ";
                    $model_Course
                        ->join('bravo_course_category', function ($join) use ($sql_where_join) {
                            $join->on('bravo_course_category.id', '=', 'bravo_courses.category_id')
                                ->WhereRaw($sql_where_join);
                        });
                }

            }

            if (!empty($author_ids = $request->query('author_id'))) {
                if(!is_array($author_ids)) $author_ids = [$author_ids];
                $model_Course->whereIn('bravo_courses.create_user', $author_ids);

            }

            $terms = $request->query('terms');
            if (is_array($terms) && !empty($terms)) {
                $model_Course->join('bravo_course_term as tt', 'tt.course_id', "bravo_courses.id")->whereIn('tt.term_id', $terms);
            }

            $review_scores = $request->query('review_score');
            if (is_array($review_scores) && !empty($review_scores)) {
                $where_review_score = [];
                foreach ($review_scores as $number){
                    $where_review_score[] = " ( bravo_courses.review_score >= {$number} AND bravo_courses.review_score <= {$number}.9 ) ";
                }
                $sql_where_review_score = " ( " . implode("OR", $where_review_score) . " )  ";
                $model_Course->WhereRaw($sql_where_review_score);
            }

            if($time_s == 'recent'){
                $model_Course->orderBy("id", "desc");
            }else{
                $model_Course->orderBy("publish_date", "desc");
            }


            $model_Course->groupBy("bravo_courses.id");

            $list = $model_Course->with(['hasWishList','translations'])->paginate(9);
            $markers = [];
            if (!empty($list)) {
                foreach ($list as $row) {
                    $markers[] = [
                        "id" => $row->id,
                        "title" => $row->title,
                        "lat" => (float)$row->map_lat,
                        "lng" => (float)$row->map_lng,
                        "gallery" => $row->getGallery(true),
                        "infobox" => view('Course::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                        'marker' => url('images/icons/png/pin.png'),
                    ];
                }
            }

            $data = [
                'rows' => $list,
                'course_category' => $this->courseCategoryClass::where('status', 'publish')->with(['translations', 'countCourse'])->get()->toTree(),
                'course_min_max_price' => $this->courseClass::getMinMaxPrice(),
                'markers' => $markers,
                "blank" => 1,
                "author" => $this->userClass::where('status', 'publish')->role(['administrator', 'vendor'])->get(),
                "seo_meta" => $this->courseClass::getSeoMetaForPageList(),
                'countTerm' => CourseTerm::select('term_id', DB::raw('count(*) as total'))->groupBy('term_id')->get(),
                'breadcrumbs'       => [
                    [
                        'name'  => __('Courses'),
                        'url'  => route('course.search'),
                        'class' => 'active'
                    ],
                ],
                'banner_image' => setting_item("course_page_search_banner", '')
            ];

            $layout = setting_item("course_layout_search", 'normal');
            if ($request->query('_layout')) {
                $layout = $request->query('_layout');
            }
            if ($is_ajax) {
               return $this->sendSuccess([
                    'html' => view('Course::frontend.layouts.search-map.list-item', $data)->render(),
                    "markers" => $data['markers']
                ]);
            }

            $data['attributes'] = $this->attributesClass::where('service', 'course')->with(['terms','translations'])->get();

            return view('Course::frontend.search', $data);
        }

        public function detail(Request $request, $slug)
        {
            $row = $this->courseClass::where('slug', $slug)->where("status", "publish")->with(['translations','hasWishList'])->first();
            if (empty($row)) {
                return redirect('/');
            }
            $translation = $row->translateOrOrigin(app()->getLocale());
            $review_list = Review::where('object_id', $row->id)
                ->where('object_model', 'course')
                ->where("status", "approved")
                ->orderBy("id", "desc")
                ->with('author')
                ->paginate(setting_item('course_review_number_per_page', 5));

            $section_list = Sections::where('course_id', $row->id)
                ->where('service', 'course')
                ->with('lessons')
                ->orderBy("display_order", "asc")
                ->get();

            $is_student = false;
            if(Auth::check()){
                $is_student = Auth::user()->isStudentOf($row->id);
            }
            $data = [
                'row' => $row,
                'translation' => $translation,
                'review_list' => $review_list,
                'section_list' => $section_list,
                'seo_meta' => $row->getSeoMetaWithTranslation(app()->getLocale(), $translation),
                'body_class'=>'is_single ',
                'attributes'     => $this->attributesClass::where('service', 'course')->get(),
                'sections'    => $this->sectionsClass::where('service', 'course')->get(),
                'course_category'  => $this->courseCategoryClass::where('status', 'publish')->get()->toTree(),
                'tags' => $row->getTags(),
                'hideBc' => '1',
                'course_related' => $row->courseRelated,
                'is_student'=>$is_student
            ];
            $this->setActiveMenu($row);
            return view('Course::frontend.detail', $data);
        }
    }
