<?php

	namespace Modules\Course\Controllers;

	use Modules\Booking\Models\BookingItem;
    use Modules\FrontendController;
	use Illuminate\Http\Request;
	use Illuminate\Support\Facades\Auth;
	use Modules\Course\Models\Course;
	use Modules\Course\Models\CourseCategory;
	use Modules\Course\Models\CourseTranslation;
	use Modules\Location\Models\Location;
	use Modules\Core\Models\Attributes;
	use Modules\Course\Models\CourseTerm;
	use Modules\Booking\Models\Booking;

	class ManageCourseController extends FrontendController
	{
		protected $courseClass;
		protected $courseTranslationClass;
		protected $courseCategoryClass;
		protected $courseTermClass;
		protected $attributesClass;
		protected $locationClass;
		protected $bookingClass;

		public function __construct()
		{
			$this->courseClass = Course::class;
			$this->courseTranslationClass = CourseTranslation::class;
			$this->courseCategoryClass = CourseCategory::class;
			$this->courseTermClass = CourseTerm::class;
			$this->attributesClass = Attributes::class;
			$this->locationClass = Location::class;
			$this->bookingClass = Booking::class;

			parent::__construct();
		}

		public function callAction($method, $parameters)
		{
			if (setting_item('course_disable')) {
				return redirect('/');
			}
			return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
		}

		public function manageCourse(Request $request)
		{
			$this->checkPermission('course_view');
			$user_id = Auth::id();

			$list_course = $this->courseClass::where("create_user", $user_id);
            if (!empty($search = $request->input("s"))) {
                $list_course->where('bravo_courses.title', 'LIKE', '%' . $search . '%');
            }
            $list_course->orderBy('id', 'desc');
			$data = [
				'rows'        => $list_course->paginate(5),
				'breadcrumbs' => [
					[
						'name' => __('Manage Courses'),
						'url'  => route('course.vendor.index'),
					],
					[
						'name'  => __('List Courses'),
						'class' => 'active'
					],
				],
				'page_title'  => __("Manage Courses"),
			];
			return view('Course::frontend.manageCourse.index', $data);
		}

		public function createCourse(Request $request)
		{
			$this->checkPermission('course_create');
			$row = new $this->courseClass();
			$data = [
				'row'           => $row,
				'translation'   => new $this->courseTranslationClass(),
				'course_category' => $this->courseCategoryClass::get()->toTree(),
				'course_location' => $this->locationClass::get()->toTree(),
				'attributes'    => $this->attributesClass::where('service', 'course')->get(),
				'breadcrumbs'   => [
					[
						'name' => __('Manage Courses'),
						'url'  => route('course.vendor.index'),
					],
					[
						'name'  => __('Create Courses'),
						'class' => 'active'
					],
				],
				'page_title'    => __("Create Courses"),
			];
			return view('Course::frontend.manageCourse.detail', $data);
		}

		public function editCourse(Request $request, $id)
		{
			$this->checkPermission('course_update');
			$user_id = Auth::id();
			$row = $this->courseClass::where("create_user", $user_id);
			$row = $row->find($id);
			if (empty($row)) {
				return redirect(route('course.vendor.index'))->with('warning', __('Course not found!'));
			}
			$translation = $row->translateOrOrigin($request->query('lang'));
			$data = [
				'translation'    => $translation,
				'row'            => $row,
				'course_category'  => $this->courseCategoryClass::get()->toTree(),
				'course_location'  => $this->locationClass::get()->toTree(),
				'attributes'     => $this->attributesClass::where('service', 'course')->get(),
				"selected_terms" => $row->course_term->pluck('term_id'),
				'breadcrumbs'    => [
					[
						'name' => __('Manage Courses'),
						'url'  => route('course.vendor.index'),
					],
					[
						'name'  => __('Edit Courses'),
						'class' => 'active'
					],
				],
				'page_title'     => __("Edit Courses"),
			];
			return view('Course::frontend.manageCourse.detail', $data);
		}

		public function store(Request $request, $id)
		{
			if ($id > 0) {
				$this->checkPermission('course_update');
				$row = $this->courseClass::find($id);
				if (empty($row)) {
					return redirect(route('course.vendor.edit', ['id' => $row->id]));
				}

				if ($row->create_user != Auth::id() and !$this->hasPermission('course_manage_others')) {
					return redirect(route('course.vendor.edit', ['id' => $row->id]));
				}

			} else {
				$this->checkPermission('course_create');
				$row = new $this->courseClass();
				$row->status = "publish";
				if (setting_item("course_vendor_create_service_must_approved_by_admin", 0)) {
					$row->status = "pending";
				}
			}

			$row->fillByAttr([
				'title',
				'content',
				'image_id',
				'banner_image_id',
				'short_desc',
				'category_id',
				'video',
				'price',
				'sale_price',
				'duration',
			], $request->input());

			$res = $row->saveOriginOrTranslation($request->input('lang'), true);
			if ($res) {
				if (!$request->input('lang') or is_default_lang($request->input('lang'))) {
					$this->saveTerms($row, $request);
				}
				$row->saveMeta($request);
				if ($id > 0) {
					return back()->with('success', __('Course updated'));
				} else {
					return redirect(route('course.vendor.edit', ['id' => $row->id]))->with('success', __('Course created'));
				}
			}
		}

		public function saveTerms($row, $request)
		{
			if (empty($request->input('terms'))) {
				$this->courseTermClass::where('course_id', $row->id)->delete();
			} else {
				$term_ids = $request->input('terms');
				foreach ($term_ids as $term_id) {
					$this->courseTermClass::firstOrCreate([
						'term_id' => $term_id,
						'course_id' => $row->id
					]);
				}
				$this->courseTermClass::where('course_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
			}
		}

		public function deleteCourse($id)
		{
			$this->checkPermission('course_delete');
			$user_id = Auth::id();
			$query = $this->courseClass::where("create_user", $user_id)->where("id", $id)->first();
			if (!empty($query)) {
				$query->delete();
			}
			return redirect(route('course.vendor.index'))->with('success', __('Delete course success!'));
		}

		public function bulkEditCourse($id, Request $request)
		{
			$this->checkPermission('course_update');
			$action = $request->input('action');
			$user_id = Auth::id();
			$query = $this->courseClass::where("create_user", $user_id)->where("id", $id)->first();
			if (empty($id)) {
				return redirect()->back()->with('error', __('No item!'));
			}
			if (empty($action)) {
				return redirect()->back()->with('error', __('Please select an action!'));
			}
			if (empty($query)) {
				return redirect()->back()->with('error', __('Not Found'));
			}
			switch ($action) {
				case "make-hide":
					$query->status = "draft";
					break;
				case "make-publish":
					$query->status = "publish";
					break;
			}
			$query->save();
			return redirect()->back()->with('success', __('Update success!'));
		}

		public function bookingReport(Request $request)
		{
            $orders = BookingItem::query()->select(['bravo_bookings.*','bravo_booking_items.object_id','bravo_booking_items.object_model'])
                ->join('bravo_bookings','bravo_bookings.id','=','bravo_booking_items.booking_id')
                ->where('bravo_booking_items.vendor_id',Auth::id())
                ->paginate(20);
			$data = [
				'bookings'    => $orders,
				'statues'     => config('booking.statuses'),
				'breadcrumbs' => [
					[
						'name' => __('Manage Courses'),
						'url'  => route('course.vendor.index'),
					],
					[
						'name'  => __('Course Orders'),
						'class' => 'active'
					],
				],
				'page_title'  => __("Course Orders"),
			];
			return view('Course::frontend.manageCourse.bookingReport', $data);
		}

		public function bookingReportBulkEdit($booking_id, Request $request)
		{
			$status = $request->input('status');
			if (!empty(setting_item("course_allow_vendor_can_change_their_booking_status")) and !empty($status) and !empty($booking_id)) {
				$query = $this->bookingClass::where("id", $booking_id);
				$query->where("vendor_id", Auth::id());
				$item = $query->first();
				if (!empty($item)) {
					$item->status = $status;
					$item->save();
					$item->sendStatusUpdatedEmails();
					return redirect()->back()->with('success', __('Update success'));
				}
				return redirect()->back()->with('error', __('Booking not found!'));
			}
			return redirect()->back()->with('error', __('Update fail!'));
		}

		public function cloneCourse(Request $request, $id)
		{
			$this->checkPermission('course_update');
			$user_id = Auth::id();
			$row = $this->courseClass::where("create_user", $user_id);
			$row = $row->find($id);
			if (empty($row)) {
				return redirect(route('course.vendor.index'))->with('warning', __('Course not found!'));
			}

			;
			try {
				$clone = $row->replicate();
				$clone->status = 'draft';
				$clone->push();
				if (!empty($row->course_term)) {
					foreach ($row->course_term as $term) {
						$e = $term->replicate();
						if ($e->push()) {
							$clone->course_term()->save($e);

						}
					}
				}
				if (!empty($row->meta)) {
					$e = $row->meta->replicate();
					if ($e->push()) {
						$clone->meta()->save($e);
					}
				}

				if(!empty($row->translations)){
					foreach ($row->translations as $translation){
						$e = $translation->replicate();
						$e->origin_id = $clone->id;
						if($e->push()){
							$clone->translations()->save($e);
						}
					}
				}
				return redirect()->back()->with('success', __('Course clone was successful'));
			} catch (\Exception $exception) {
				$clone->delete();
				return redirect()->back()->with('warning', __($exception->getMessage()));
			}
		}

	}
